{"ast":null,"code":"const API_URL = `https://api-test-ln.herokuapp.com/articles`;\n\nasync function fetchAPI(url, method, data = null) {\n  const res = await fetch(url, {\n    method: method,\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: data\n  });\n  const json = await res.json();\n\n  if (json.errors) {\n    console.error(json.errors);\n    throw new Error('Error en traer datos de la API');\n  }\n\n  return json;\n}\n\nexport async function getArticles() {\n  let expiry = 1 * 60; // 1 minuto por default\n\n  let cacheKey = API_URL;\n  let cached = window.localStorage.getItem(cacheKey);\n  let whenCached = window.localStorage.getItem(cacheKey + ':ts');\n\n  if (cached !== null && whenCached !== null) {\n    let age = (Date.now() - whenCached) / 1000;\n\n    if (age < expiry) {\n      let response = new Response(cached);\n      return Promise.resolve(response);\n    }\n  } else {\n    // We need to clean up this old key\n    localStorage.removeItem(cacheKey);\n    localStorage.removeItem(cacheKey + ':ts');\n  }\n\n  const data = await fetchAPI(API_URL, 'GET'); //localStorage.setItem(API_URL, data.articles)\n  //localStorage.setItem(API_URL + ':ts', Date.now())\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\n\n  return data.articles ? data.articles : [];\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/lib/api.js"],"names":["API_URL","fetchAPI","url","method","data","res","fetch","headers","body","json","errors","console","error","Error","getArticles","expiry","cacheKey","cached","window","localStorage","getItem","whenCached","age","Date","now","response","Response","Promise","resolve","removeItem","articles"],"mappings":"AAAA,MAAMA,OAAO,GAAI,4CAAjB;;AAEA,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,IAAI,GAAG,IAA5C,EAAkD;AAEhD,QAAMC,GAAG,GAAG,MAAMC,KAAK,CAACJ,GAAD,EAAM;AAC3BC,IAAAA,MAAM,EAAEA,MADmB;AAE3BI,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT,KAFkB;AAK3BC,IAAAA,IAAI,EAAEJ;AALqB,GAAN,CAAvB;AAQA,QAAMK,IAAI,GAAG,MAAMJ,GAAG,CAACI,IAAJ,EAAnB;;AACA,MAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,IAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,UAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,SAAOJ,IAAP;AACD;;AAED,OAAO,eAAeK,WAAf,GAA6B;AAElC,MAAIC,MAAM,GAAG,IAAI,EAAjB,CAFkC,CAEd;;AACpB,MAAIC,QAAQ,GAAGhB,OAAf;AACA,MAAIiB,MAAM,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,QAA5B,CAAb;AACA,MAAIK,UAAU,GAAGH,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BJ,QAAQ,GAAG,KAAvC,CAAjB;;AAEA,MAAIC,MAAM,KAAK,IAAX,IAAmBI,UAAU,KAAK,IAAtC,EAA4C;AAC1C,QAAIC,GAAG,GAAG,CAACC,IAAI,CAACC,GAAL,KAAaH,UAAd,IAA4B,IAAtC;;AACA,QAAIC,GAAG,GAAGP,MAAV,EAAkB;AAChB,UAAIU,QAAQ,GAAG,IAAIC,QAAJ,CAAaT,MAAb,CAAf;AACA,aAAOU,OAAO,CAACC,OAAR,CAAgBH,QAAhB,CAAP;AACD;AAEF,GAPD,MAOO;AACL;AACAN,IAAAA,YAAY,CAACU,UAAb,CAAwBb,QAAxB;AACAG,IAAAA,YAAY,CAACU,UAAb,CAAwBb,QAAQ,GAAG,KAAnC;AACD;;AAED,QAAMZ,IAAI,GAAG,MAAMH,QAAQ,CAACD,OAAD,EAAU,KAAV,CAA3B,CApBkC,CAqBlC;AACA;AACA;;AACA,SAAOI,IAAI,CAAC0B,QAAL,GAAgB1B,IAAI,CAAC0B,QAArB,GAAgC,EAAvC;AACD","sourcesContent":["const API_URL = `https://api-test-ln.herokuapp.com/articles`\r\n\r\nasync function fetchAPI(url, method, data = null) {\r\n\r\n  const res = await fetch(url, {\r\n    method: method,\r\n    headers: {\r\n      'Content-Type': 'application/json'\r\n    },\r\n    body: data,\r\n  })\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\nexport async function getArticles() {\r\n\r\n  let expiry = 1 * 60 // 1 minuto por default\r\n  let cacheKey = API_URL;\r\n  let cached = window.localStorage.getItem(cacheKey)\r\n  let whenCached = window.localStorage.getItem(cacheKey + ':ts')\r\n\r\n  if (cached !== null && whenCached !== null) {\r\n    let age = (Date.now() - whenCached) / 1000\r\n    if (age < expiry) {\r\n      let response = new Response(cached)\r\n      return Promise.resolve(response)\r\n    }\r\n\r\n  } else {\r\n    // We need to clean up this old key\r\n    localStorage.removeItem(cacheKey)\r\n    localStorage.removeItem(cacheKey + ':ts')\r\n  }\r\n\r\n  const data = await fetchAPI(API_URL, 'GET');\r\n  //localStorage.setItem(API_URL, data.articles)\r\n  //localStorage.setItem(API_URL + ':ts', Date.now())\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\r\n  return data.articles ? data.articles : [];\r\n}"]},"metadata":{},"sourceType":"module"}