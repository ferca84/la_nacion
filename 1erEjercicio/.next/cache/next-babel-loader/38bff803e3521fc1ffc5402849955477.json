{"ast":null,"code":"import React from 'react';\nimport { slugs } from '../test/dummy-slugs';\nimport lscache from 'lscache';\nimport fetch from 'isomorphic-fetch';\nconst TTL_MINUTES = 5;\nconst API_URL = `https://api-test-ln.herokuapp.com/articles`;\n\nasync function fetchAPI(url, options) {\n  // We don't cache anything when server-side rendering.\n  // That way if users refresh the page they always get fresh data.\n  if (true) {\n    const jsonUncache = await fetch(url, options).then(res => res.json());\n\n    if (json.errors) {\n      console.error(json.errors);\n      throw new Error('Error en traer datos de la API');\n    }\n\n    return jsonUncache;\n  }\n\n  let cachedResponse = lscache.get(url); // If there is no cached response,\n  // do the actual call and store the response\n\n  if (cachedResponse === null) {\n    cachedResponse = await fetch(url, options).then(res => res.json());\n    lscache.set(url, cachedResponse, TTL_MINUTES);\n\n    if (cachedResponse.errors) {\n      console.error(cachedResponse.errors);\n      throw new Error('Error en traer datos de la API');\n    }\n  }\n\n  return cachedResponse;\n  /*const res = await fetch(url, options)\r\n    const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n    return json;*/\n}\n\nexport async function getArticles() {\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const data = await fetchAPI(API_URL, options); //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\n\n  return data.articles ? data.articles : [];\n}\nexport function getSlugs() {\n  const data = slugs; //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\n\n  return data;\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/la_nacion/1erEjercicio/lib/api.js"],"names":["React","slugs","lscache","fetch","TTL_MINUTES","API_URL","fetchAPI","url","options","jsonUncache","then","res","json","errors","console","error","Error","cachedResponse","get","set","getArticles","method","headers","data","articles","getSlugs"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,OAAOC,KAAP,MAAkB,kBAAlB;AAEA,MAAMC,WAAW,GAAG,CAApB;AAEA,MAAMC,OAAO,GAAI,4CAAjB;;AAEA,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AAEpC;AACA;AACA,YAAmC;AAC/B,UAAMC,WAAW,GAAG,MAAMN,KAAK,CAACI,GAAD,EAAMC,OAAN,CAAL,CAAoBE,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAhC,CAA1B;;AACA,QAAIA,IAAI,CAACC,MAAT,EAAiB;AACfC,MAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AACA,YAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,WAAOP,WAAP;AACH;;AAED,MAAIQ,cAAc,GAAGf,OAAO,CAACgB,GAAR,CAAYX,GAAZ,CAArB,CAdoC,CAgBpC;AACA;;AACA,MAAIU,cAAc,KAAK,IAAvB,EAA6B;AAC3BA,IAAAA,cAAc,GAAG,MAAMd,KAAK,CAACI,GAAD,EAAMC,OAAN,CAAL,CACpBE,IADoB,CACfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADQ,CAAvB;AAEAV,IAAAA,OAAO,CAACiB,GAAR,CAAYZ,GAAZ,EAAiBU,cAAjB,EAAiCb,WAAjC;;AAEA,QAAIa,cAAc,CAACJ,MAAnB,EAA2B;AACzBC,MAAAA,OAAO,CAACC,KAAR,CAAcE,cAAc,CAACJ,MAA7B;AACA,YAAM,IAAIG,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF;;AAED,SAAOC,cAAP;AAEA;;;;;;;AASD;;AAED,OAAO,eAAeG,WAAf,GAA6B;AAClC,QAAMZ,OAAO,GAAG;AACEa,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFX,GAAhB;AAOA,QAAMC,IAAI,GAAG,MAAMjB,QAAQ,CAACD,OAAD,EAAUG,OAAV,CAA3B,CARkC,CASlC;;AACA,SAAOe,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAArB,GAAgC,EAAvC;AACD;AAED,OAAO,SAASC,QAAT,GAAoB;AACzB,QAAMF,IAAI,GAAGtB,KAAb,CADyB,CAEzB;;AACA,SAAOsB,IAAP;AACD","sourcesContent":["import React from 'react'\r\nimport {slugs} from '../test/dummy-slugs'\r\nimport lscache from 'lscache';\r\nimport fetch from 'isomorphic-fetch';\r\n\r\nconst TTL_MINUTES = 5;\r\n\r\nconst API_URL = `https://api-test-ln.herokuapp.com/articles`\r\n\r\nasync function fetchAPI(url, options) {\r\n\r\n  // We don't cache anything when server-side rendering.\r\n  // That way if users refresh the page they always get fresh data.\r\n  if (typeof window === 'undefined') {\r\n      const jsonUncache = await fetch(url, options).then(res => res.json());\r\n      if (json.errors) {\r\n        console.error(json.errors)\r\n        throw new Error('Error en traer datos de la API')\r\n      }\r\n\r\n      return jsonUncache;\r\n  }\r\n\r\n  let cachedResponse = lscache.get(url);\r\n\r\n  // If there is no cached response,\r\n  // do the actual call and store the response\r\n  if (cachedResponse === null) {\r\n    cachedResponse = await fetch(url, options)\r\n      .then(res => res.json());\r\n    lscache.set(url, cachedResponse, TTL_MINUTES);\r\n\r\n    if (cachedResponse.errors) {\r\n      console.error(cachedResponse.errors)\r\n      throw new Error('Error en traer datos de la API')\r\n    }\r\n  }\r\n\r\n  return cachedResponse;\r\n\r\n  /*const res = await fetch(url, options)\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;*/\r\n}\r\n\r\nexport async function getArticles() {\r\n  const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  };\r\n\r\n  const data = await fetchAPI(API_URL, options);\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\r\n  return data.articles ? data.articles : [];\r\n}\r\n\r\nexport function getSlugs() {\r\n  const data = slugs;\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}