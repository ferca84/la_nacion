{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport { slugs } from '../test/dummy-slugs';\nimport lscache from 'lscache';\nimport { API_URL } from './constants'; //import fetch from 'isomorphic-fetch';\n\nvar TTL_MINUTES = 1;\n\nfunction fetchAPI(_x, _x2) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n    var jsonUncache, cachedResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!false) {\n              _context.next = 9;\n              break;\n            }\n\n            console.log('paso por server rendering');\n            _context.next = 4;\n            return fetch(url, options).then(function (res) {\n              return res.json();\n            });\n\n          case 4:\n            jsonUncache = _context.sent;\n\n            if (!jsonUncache.errors) {\n              _context.next = 8;\n              break;\n            }\n\n            console.error(jsonUncache.errors);\n            throw new Error('Error en traer datos de la API');\n\n          case 8:\n            return _context.abrupt(\"return\", jsonUncache);\n\n          case 9:\n            cachedResponse = lscache.get(url); // If there is no cached response,\n            // do the actual call and store the response\n\n            if (!(cachedResponse === null)) {\n              _context.next = 19;\n              break;\n            }\n\n            console.log('paso por cliente no cacheado');\n            _context.next = 14;\n            return fetch(url, options).then(function (res) {\n              return res.json();\n            });\n\n          case 14:\n            cachedResponse = _context.sent;\n            lscache.set(url, cachedResponse, TTL_MINUTES);\n\n            if (!cachedResponse.errors) {\n              _context.next = 19;\n              break;\n            }\n\n            console.error(cachedResponse.errors);\n            throw new Error('Error en traer datos de la API');\n\n          case 19:\n            return _context.abrupt(\"return\", cachedResponse);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getArticles() {\n  return _getArticles.apply(this, arguments);\n}\n\nfunction _getArticles() {\n  _getArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var options, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            console.log('pase por getArticles');\n            options = {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.next = 4;\n            return fetchAPI(API_URL, options);\n\n          case 4:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.articles ? data.articles : []);\n\n          case 6:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getArticles.apply(this, arguments);\n}\n\nexport function overrideCache(key, val) {\n  lscache.set(key, val, TTL_MINUTES);\n}\nexport function getSlugs() {\n  var data = slugs; //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\n\n  return data;\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/la_nacion/1erEjercicio/lib/api.js"],"names":["React","slugs","lscache","API_URL","TTL_MINUTES","fetchAPI","url","options","console","log","fetch","then","res","json","jsonUncache","errors","error","Error","cachedResponse","get","set","getArticles","method","headers","data","articles","overrideCache","key","val","getSlugs"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,IAAMC,WAAW,GAAG,CAApB;;SAEeC,Q;;;;;uEAAf,iBAAwBC,GAAxB,EAA6BC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAKMC,YAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AALN;AAAA,mBAMgCC,KAAK,CAACJ,GAAD,EAAMC,OAAN,CAAL,CAAoBI,IAApB,CAAyB,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAA5B,CANhC;;AAAA;AAMYC,YAAAA,WANZ;;AAAA,iBAOUA,WAAW,CAACC,MAPtB;AAAA;AAAA;AAAA;;AAQQP,YAAAA,OAAO,CAACQ,KAAR,CAAcF,WAAW,CAACC,MAA1B;AARR,kBASc,IAAIE,KAAJ,CAAU,gCAAV,CATd;;AAAA;AAAA,6CAYaH,WAZb;;AAAA;AAeMI,YAAAA,cAfN,GAeuBhB,OAAO,CAACiB,GAAR,CAAYb,GAAZ,CAfvB,EAiBE;AACA;;AAlBF,kBAmBMY,cAAc,KAAK,IAnBzB;AAAA;AAAA;AAAA;;AAoBIV,YAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AApBJ;AAAA,mBAqB2BC,KAAK,CAACJ,GAAD,EAAMC,OAAN,CAAL,CACpBI,IADoB,CACf,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aADY,CArB3B;;AAAA;AAqBIK,YAAAA,cArBJ;AAuBIhB,YAAAA,OAAO,CAACkB,GAAR,CAAYd,GAAZ,EAAiBY,cAAjB,EAAiCd,WAAjC;;AAvBJ,iBAyBQc,cAAc,CAACH,MAzBvB;AAAA;AAAA;AAAA;;AA0BMP,YAAAA,OAAO,CAACQ,KAAR,CAAcE,cAAc,CAACH,MAA7B;AA1BN,kBA2BY,IAAIE,KAAJ,CAAU,gCAAV,CA3BZ;;AAAA;AAAA,6CA+BSC,cA/BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA4CA,gBAAsBG,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACLb,YAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACMF,YAAAA,OAFD,GAEW;AACEe,cAAAA,MAAM,EAAE,KADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFX,aAFX;AAAA;AAAA,mBASclB,QAAQ,CAACF,OAAD,EAAUI,OAAV,CATtB;;AAAA;AASCiB,YAAAA,IATD;AAAA,8CAWEA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAArB,GAAgC,EAXlC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACtC1B,EAAAA,OAAO,CAACkB,GAAR,CAAYO,GAAZ,EAAiBC,GAAjB,EAAsBxB,WAAtB;AACD;AAED,OAAO,SAASyB,QAAT,GAAoB;AACzB,MAAML,IAAI,GAAGvB,KAAb,CADyB,CAEzB;;AACA,SAAOuB,IAAP;AACD","sourcesContent":["import React from 'react'\r\nimport {slugs} from '../test/dummy-slugs'\r\nimport lscache from 'lscache';\r\nimport { API_URL } from './constants';\r\n//import fetch from 'isomorphic-fetch';\r\n\r\nconst TTL_MINUTES = 1;\r\n\r\nasync function fetchAPI(url, options) {\r\n\r\n  // We don't cache anything when server-side rendering.\r\n  // That way if users refresh the page they always get fresh data.\r\n  if (typeof window === 'undefined') {\r\n      console.log('paso por server rendering')\r\n      const jsonUncache = await fetch(url, options).then(res => res.json());\r\n      if (jsonUncache.errors) {\r\n        console.error(jsonUncache.errors)\r\n        throw new Error('Error en traer datos de la API')\r\n      }\r\n\r\n      return jsonUncache;\r\n  }\r\n\r\n  let cachedResponse = lscache.get(url);\r\n\r\n  // If there is no cached response,\r\n  // do the actual call and store the response\r\n  if (cachedResponse === null) {\r\n    console.log('paso por cliente no cacheado')\r\n    cachedResponse = await fetch(url, options)\r\n      .then(res => res.json());\r\n    lscache.set(url, cachedResponse, TTL_MINUTES);\r\n\r\n    if (cachedResponse.errors) {\r\n      console.error(cachedResponse.errors)\r\n      throw new Error('Error en traer datos de la API')\r\n    }\r\n  }\r\n\r\n  return cachedResponse;\r\n\r\n  /*const res = await fetch(url, options)\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;*/\r\n}\r\n\r\nexport async function getArticles() {\r\n  console.log('pase por getArticles')\r\n  const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  };\r\n\r\n  const data = await fetchAPI(API_URL, options);\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\r\n  return data.articles ? data.articles : [];\r\n}\r\n\r\nexport function overrideCache(key, val) {\r\n  lscache.set(key, val, TTL_MINUTES);\r\n}\r\n\r\nexport function getSlugs() {\r\n  const data = slugs;\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}