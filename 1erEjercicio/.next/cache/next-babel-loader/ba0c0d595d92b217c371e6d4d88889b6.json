{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport { slugs } from '../test/dummy-slugs';\nimport { API_URL } from './constants';\n\nfunction fetchAPI(_x, _x2) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n    var res, json;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return fetch(url, options);\n\n          case 2:\n            res = _context.sent;\n            _context.next = 5;\n            return res.json();\n\n          case 5:\n            json = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 9;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Error en traer datos de la API');\n\n          case 9:\n            return _context.abrupt(\"return\", json);\n\n          case 10:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getArticles() {\n  return _getArticles.apply(this, arguments);\n}\n\nfunction _getArticles() {\n  _getArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var options, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            //console.log('pase por getArticles')\n            options = {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.next = 3;\n            return fetchAPI(API_URL, options);\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.articles ? data.articles : []);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getArticles.apply(this, arguments);\n}\n\nexport function getSlugs() {\n  var data = slugs;\n  return data;\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/la_nacion/1erEjercicio/lib/api.js"],"names":["React","slugs","API_URL","fetchAPI","url","options","fetch","res","json","errors","console","error","Error","getArticles","method","headers","data","articles","getSlugs"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,SAASC,OAAT,QAAwB,aAAxB;;SAEeC,Q;;;;;uEAAf,iBAAwBC,GAAxB,EAA6BC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,mBAEoBC,KAAK,CAACF,GAAD,EAAMC,OAAN,CAFzB;;AAAA;AAEQE,YAAAA,GAFR;AAAA;AAAA,mBAIqBA,GAAG,CAACC,IAAJ,EAJrB;;AAAA;AAIQA,YAAAA,IAJR;;AAAA,iBAKMA,IAAI,CAACC,MALX;AAAA;AAAA;AAAA;;AAMIC,YAAAA,OAAO,CAACC,KAAR,CAAcH,IAAI,CAACC,MAAnB;AANJ,kBAOU,IAAIG,KAAJ,CAAU,gCAAV,CAPV;;AAAA;AAAA,6CAUSJ,IAVT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaA,gBAAsBK,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACL;AACMR,YAAAA,OAFD,GAEW;AACES,cAAAA,MAAM,EAAE,KADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFX,aAFX;AAAA;AAAA,mBAScZ,QAAQ,CAACD,OAAD,EAAUG,OAAV,CATtB;;AAAA;AASCW,YAAAA,IATD;AAAA,8CAWEA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAArB,GAAgC,EAXlC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAcP,OAAO,SAASC,QAAT,GAAoB;AACzB,MAAMF,IAAI,GAAGf,KAAb;AACA,SAAOe,IAAP;AACD","sourcesContent":["import React from 'react'\r\nimport {slugs} from '../test/dummy-slugs'\r\nimport { API_URL } from './constants';\r\n\r\nasync function fetchAPI(url, options) {\r\n\r\n  const res = await fetch(url, options)\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;\r\n}\r\n\r\nexport async function getArticles() {\r\n  //console.log('pase por getArticles')\r\n  const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  };\r\n\r\n  const data = await fetchAPI(API_URL, options);\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p√°gina se renderize\r\n  return data.articles ? data.articles : [];\r\n}\r\n\r\nexport function getSlugs() {\r\n  const data = slugs;\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}