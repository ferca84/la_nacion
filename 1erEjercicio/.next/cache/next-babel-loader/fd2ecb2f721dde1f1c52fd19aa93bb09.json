{"ast":null,"code":"import React from 'react';\nimport { slugs } from '../test/dummy-slugs';\nimport lscache from 'lscache';\nimport { API_URL } from './constants'; //import fetch from 'isomorphic-fetch';\n\nconst TTL_MINUTES = 1;\n\nasync function fetchAPI(url, options) {\n  // We don't cache anything when server-side rendering.\n  // That way if users refresh the page they always get fresh data.\n  if (true) {\n    console.log('paso por server rendering');\n    const jsonUncache = await fetch(url, options).then(res => res.json());\n\n    if (jsonUncache.errors) {\n      console.error(jsonUncache.errors);\n      throw new Error('Error en traer datos de la API');\n    }\n\n    return jsonUncache;\n  }\n\n  let cachedResponse = lscache.get(url);\n  console.log('traje datos de cache ' + cachedResponse); // If there is no cached response,\n  // do the actual call and store the response\n\n  if (cachedResponse === null) {\n    console.log('paso por cliente no cacheado');\n    cachedResponse = await fetch(url, options).then(res => res.json());\n    lscache.set(url, cachedResponse, TTL_MINUTES);\n\n    if (cachedResponse.errors) {\n      console.error(cachedResponse.errors);\n      throw new Error('Error en traer datos de la API');\n    }\n  }\n\n  return cachedResponse;\n  /*const res = await fetch(url, options)\r\n    const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n    return json;*/\n}\n\nexport async function getArticles() {\n  console.log('pase por getArticles');\n  const options = {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json'\n    }\n  };\n  const data = await fetchAPI(API_URL, options); //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\n\n  return data.articles ? data.articles : [];\n}\nexport function overrideCache(key, val) {\n  lscache.set(key, val, TTL_MINUTES);\n}\nexport function getSlugs() {\n  const data = slugs; //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\n\n  return data;\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/la_nacion/1erEjercicio/lib/api.js"],"names":["React","slugs","lscache","API_URL","TTL_MINUTES","fetchAPI","url","options","console","log","jsonUncache","fetch","then","res","json","errors","error","Error","cachedResponse","get","set","getArticles","method","headers","data","articles","overrideCache","key","val","getSlugs"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,SAApB;AACA,SAASC,OAAT,QAAwB,aAAxB,C,CACA;;AAEA,MAAMC,WAAW,GAAG,CAApB;;AAEA,eAAeC,QAAf,CAAwBC,GAAxB,EAA6BC,OAA7B,EAAsC;AAEpC;AACA;AACA,YAAmC;AAC/BC,IAAAA,OAAO,CAACC,GAAR,CAAY,2BAAZ;AACA,UAAMC,WAAW,GAAG,MAAMC,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CAAoBK,IAApB,CAAyBC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EAAhC,CAA1B;;AACA,QAAIJ,WAAW,CAACK,MAAhB,EAAwB;AACtBP,MAAAA,OAAO,CAACQ,KAAR,CAAcN,WAAW,CAACK,MAA1B;AACA,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;;AAED,WAAOP,WAAP;AACH;;AAED,MAAIQ,cAAc,GAAGhB,OAAO,CAACiB,GAAR,CAAYb,GAAZ,CAArB;AACAE,EAAAA,OAAO,CAACC,GAAR,CAAY,0BAA0BS,cAAtC,EAhBoC,CAiBpC;AACA;;AACA,MAAIA,cAAc,KAAK,IAAvB,EAA6B;AAC3BV,IAAAA,OAAO,CAACC,GAAR,CAAY,8BAAZ;AACAS,IAAAA,cAAc,GAAG,MAAMP,KAAK,CAACL,GAAD,EAAMC,OAAN,CAAL,CACpBK,IADoB,CACfC,GAAG,IAAIA,GAAG,CAACC,IAAJ,EADQ,CAAvB;AAEAZ,IAAAA,OAAO,CAACkB,GAAR,CAAYd,GAAZ,EAAiBY,cAAjB,EAAiCd,WAAjC;;AAEA,QAAIc,cAAc,CAACH,MAAnB,EAA2B;AACzBP,MAAAA,OAAO,CAACQ,KAAR,CAAcE,cAAc,CAACH,MAA7B;AACA,YAAM,IAAIE,KAAJ,CAAU,gCAAV,CAAN;AACD;AACF;;AAED,SAAOC,cAAP;AAEA;;;;;;;AASD;;AAED,OAAO,eAAeG,WAAf,GAA6B;AAClCb,EAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;AACA,QAAMF,OAAO,GAAG;AACEe,IAAAA,MAAM,EAAE,KADV;AAEEC,IAAAA,OAAO,EAAE;AACP,sBAAgB;AADT;AAFX,GAAhB;AAOA,QAAMC,IAAI,GAAG,MAAMnB,QAAQ,CAACF,OAAD,EAAUI,OAAV,CAA3B,CATkC,CAUlC;;AACA,SAAOiB,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAArB,GAAgC,EAAvC;AACD;AAED,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACtC1B,EAAAA,OAAO,CAACkB,GAAR,CAAYO,GAAZ,EAAiBC,GAAjB,EAAsBxB,WAAtB;AACD;AAED,OAAO,SAASyB,QAAT,GAAoB;AACzB,QAAML,IAAI,GAAGvB,KAAb,CADyB,CAEzB;;AACA,SAAOuB,IAAP;AACD","sourcesContent":["import React from 'react'\r\nimport {slugs} from '../test/dummy-slugs'\r\nimport lscache from 'lscache';\r\nimport { API_URL } from './constants';\r\n//import fetch from 'isomorphic-fetch';\r\n\r\nconst TTL_MINUTES = 1;\r\n\r\nasync function fetchAPI(url, options) {\r\n\r\n  // We don't cache anything when server-side rendering.\r\n  // That way if users refresh the page they always get fresh data.\r\n  if (typeof window === 'undefined') {\r\n      console.log('paso por server rendering')\r\n      const jsonUncache = await fetch(url, options).then(res => res.json());\r\n      if (jsonUncache.errors) {\r\n        console.error(jsonUncache.errors)\r\n        throw new Error('Error en traer datos de la API')\r\n      }\r\n\r\n      return jsonUncache;\r\n  }\r\n\r\n  let cachedResponse = lscache.get(url);\r\n  console.log('traje datos de cache ' + cachedResponse)\r\n  // If there is no cached response,\r\n  // do the actual call and store the response\r\n  if (cachedResponse === null) {\r\n    console.log('paso por cliente no cacheado')\r\n    cachedResponse = await fetch(url, options)\r\n      .then(res => res.json());\r\n    lscache.set(url, cachedResponse, TTL_MINUTES);\r\n\r\n    if (cachedResponse.errors) {\r\n      console.error(cachedResponse.errors)\r\n      throw new Error('Error en traer datos de la API')\r\n    }\r\n  }\r\n\r\n  return cachedResponse;\r\n\r\n  /*const res = await fetch(url, options)\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;*/\r\n}\r\n\r\nexport async function getArticles() {\r\n  console.log('pase por getArticles')\r\n  const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  };\r\n\r\n  const data = await fetchAPI(API_URL, options);\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\r\n  return data.articles ? data.articles : [];\r\n}\r\n\r\nexport function overrideCache(key, val) {\r\n  lscache.set(key, val, TTL_MINUTES);\r\n}\r\n\r\nexport function getSlugs() {\r\n  const data = slugs;\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la p치gina se renderize\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}