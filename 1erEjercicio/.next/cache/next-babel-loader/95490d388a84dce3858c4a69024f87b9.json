{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport React from 'react';\nimport { slugs } from '../test/dummy-slugs';\nimport lscache from 'lscache'; //import fetch from 'isomorphic-fetch';\n\nvar TTL_MINUTES = 5;\nvar API_URL = \"https://api-test-ln.herokuapp.com/articles\";\n\nfunction fetchAPI(_x, _x2) {\n  return _fetchAPI.apply(this, arguments);\n}\n\nfunction _fetchAPI() {\n  _fetchAPI = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(url, options) {\n    var jsonUncache, cachedResponse;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!false) {\n              _context.next = 8;\n              break;\n            }\n\n            _context.next = 3;\n            return fetch(url, options).then(function (res) {\n              return res.json();\n            });\n\n          case 3:\n            jsonUncache = _context.sent;\n\n            if (!json.errors) {\n              _context.next = 7;\n              break;\n            }\n\n            console.error(json.errors);\n            throw new Error('Error en traer datos de la API');\n\n          case 7:\n            return _context.abrupt(\"return\", jsonUncache);\n\n          case 8:\n            cachedResponse = lscache.get(url); // If there is no cached response,\n            // do the actual call and store the response\n\n            if (!(cachedResponse === null)) {\n              _context.next = 17;\n              break;\n            }\n\n            _context.next = 12;\n            return fetch(url, options).then(function (res) {\n              return res.json();\n            });\n\n          case 12:\n            cachedResponse = _context.sent;\n            lscache.set(url, cachedResponse, TTL_MINUTES);\n\n            if (!cachedResponse.errors) {\n              _context.next = 17;\n              break;\n            }\n\n            console.error(cachedResponse.errors);\n            throw new Error('Error en traer datos de la API');\n\n          case 17:\n            return _context.abrupt(\"return\", cachedResponse);\n\n          case 18:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _fetchAPI.apply(this, arguments);\n}\n\nexport function getArticles() {\n  return _getArticles.apply(this, arguments);\n}\n\nfunction _getArticles() {\n  _getArticles = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var options, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = {\n              method: 'GET',\n              headers: {\n                'Content-Type': 'application/json'\n              }\n            };\n            _context2.next = 3;\n            return fetchAPI(API_URL, options);\n\n          case 3:\n            data = _context2.sent;\n            return _context2.abrupt(\"return\", data.articles ? data.articles : []);\n\n          case 5:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n  return _getArticles.apply(this, arguments);\n}\n\nexport function overrideCache(key, val) {\n  lscache.set(key, val, TTL_MINUTES);\n}\nexport function getSlugs() {\n  var data = slugs; //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\n\n  return data;\n}","map":{"version":3,"sources":["E:/Web/xampp/htdocs/la_nacion/la_nacion/1erEjercicio/lib/api.js"],"names":["React","slugs","lscache","TTL_MINUTES","API_URL","fetchAPI","url","options","fetch","then","res","json","jsonUncache","errors","console","error","Error","cachedResponse","get","set","getArticles","method","headers","data","articles","overrideCache","key","val","getSlugs"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAAQC,KAAR,QAAoB,qBAApB;AACA,OAAOC,OAAP,MAAoB,SAApB,C,CACA;;AAEA,IAAMC,WAAW,GAAG,CAApB;AAEA,IAAMC,OAAO,+CAAb;;SAEeC,Q;;;;;uEAAf,iBAAwBC,GAAxB,EAA6BC,OAA7B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAKgCC,KAAK,CAACF,GAAD,EAAMC,OAAN,CAAL,CAAoBE,IAApB,CAAyB,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aAA5B,CALhC;;AAAA;AAKYC,YAAAA,WALZ;;AAAA,iBAMUD,IAAI,CAACE,MANf;AAAA;AAAA;AAAA;;AAOQC,YAAAA,OAAO,CAACC,KAAR,CAAcJ,IAAI,CAACE,MAAnB;AAPR,kBAQc,IAAIG,KAAJ,CAAU,gCAAV,CARd;;AAAA;AAAA,6CAWaJ,WAXb;;AAAA;AAcMK,YAAAA,cAdN,GAcuBf,OAAO,CAACgB,GAAR,CAAYZ,GAAZ,CAdvB,EAgBE;AACA;;AAjBF,kBAkBMW,cAAc,KAAK,IAlBzB;AAAA;AAAA;AAAA;;AAAA;AAAA,mBAmB2BT,KAAK,CAACF,GAAD,EAAMC,OAAN,CAAL,CACpBE,IADoB,CACf,UAAAC,GAAG;AAAA,qBAAIA,GAAG,CAACC,IAAJ,EAAJ;AAAA,aADY,CAnB3B;;AAAA;AAmBIM,YAAAA,cAnBJ;AAqBIf,YAAAA,OAAO,CAACiB,GAAR,CAAYb,GAAZ,EAAiBW,cAAjB,EAAiCd,WAAjC;;AArBJ,iBAuBQc,cAAc,CAACJ,MAvBvB;AAAA;AAAA;AAAA;;AAwBMC,YAAAA,OAAO,CAACC,KAAR,CAAcE,cAAc,CAACJ,MAA7B;AAxBN,kBAyBY,IAAIG,KAAJ,CAAU,gCAAV,CAzBZ;;AAAA;AAAA,6CA6BSC,cA7BT;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AA0CA,gBAAsBG,WAAtB;AAAA;AAAA;;;0EAAO;AAAA;AAAA;AAAA;AAAA;AAAA;AACCb,YAAAA,OADD,GACW;AACEc,cAAAA,MAAM,EAAE,KADV;AAEEC,cAAAA,OAAO,EAAE;AACP,gCAAgB;AADT;AAFX,aADX;AAAA;AAAA,mBAQcjB,QAAQ,CAACD,OAAD,EAAUG,OAAV,CARtB;;AAAA;AAQCgB,YAAAA,IARD;AAAA,8CAUEA,IAAI,CAACC,QAAL,GAAgBD,IAAI,CAACC,QAArB,GAAgC,EAVlC;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,G;;;;AAaP,OAAO,SAASC,aAAT,CAAuBC,GAAvB,EAA4BC,GAA5B,EAAiC;AACtCzB,EAAAA,OAAO,CAACiB,GAAR,CAAYO,GAAZ,EAAiBC,GAAjB,EAAsBxB,WAAtB;AACD;AAED,OAAO,SAASyB,QAAT,GAAoB;AACzB,MAAML,IAAI,GAAGtB,KAAb,CADyB,CAEzB;;AACA,SAAOsB,IAAP;AACD","sourcesContent":["import React from 'react'\r\nimport {slugs} from '../test/dummy-slugs'\r\nimport lscache from 'lscache';\r\n//import fetch from 'isomorphic-fetch';\r\n\r\nconst TTL_MINUTES = 5;\r\n\r\nconst API_URL = `https://api-test-ln.herokuapp.com/articles`\r\n\r\nasync function fetchAPI(url, options) {\r\n\r\n  // We don't cache anything when server-side rendering.\r\n  // That way if users refresh the page they always get fresh data.\r\n  if (typeof window === 'undefined') {\r\n      const jsonUncache = await fetch(url, options).then(res => res.json());\r\n      if (json.errors) {\r\n        console.error(json.errors)\r\n        throw new Error('Error en traer datos de la API')\r\n      }\r\n\r\n      return jsonUncache;\r\n  }\r\n\r\n  let cachedResponse = lscache.get(url);\r\n\r\n  // If there is no cached response,\r\n  // do the actual call and store the response\r\n  if (cachedResponse === null) {\r\n    cachedResponse = await fetch(url, options)\r\n      .then(res => res.json());\r\n    lscache.set(url, cachedResponse, TTL_MINUTES);\r\n\r\n    if (cachedResponse.errors) {\r\n      console.error(cachedResponse.errors)\r\n      throw new Error('Error en traer datos de la API')\r\n    }\r\n  }\r\n\r\n  return cachedResponse;\r\n\r\n  /*const res = await fetch(url, options)\r\n\r\n  const json = await res.json()\r\n  if (json.errors) {\r\n    console.error(json.errors)\r\n    throw new Error('Error en traer datos de la API')\r\n  }\r\n\r\n  return json;*/\r\n}\r\n\r\nexport async function getArticles() {\r\n  const options = {\r\n                    method: 'GET',\r\n                    headers: {\r\n                      'Content-Type': 'application/json'\r\n                    }\r\n                  };\r\n\r\n  const data = await fetchAPI(API_URL, options);\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\r\n  return data.articles ? data.articles : [];\r\n}\r\n\r\nexport function overrideCache(key, val) {\r\n  lscache.set(key, val, TTL_MINUTES);\r\n}\r\n\r\nexport function getSlugs() {\r\n  const data = slugs;\r\n  //Si no llegara a encontrarse articulos, paso un array vacio para que el resto de la página se renderize\r\n  return data;\r\n}"]},"metadata":{},"sourceType":"module"}